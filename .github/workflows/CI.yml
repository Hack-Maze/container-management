name: fast-CI

on: 
  workflow_dispatch:

  push: 
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
      
    paths-ignore:    
        - '*.md'
        - 'docker-compose.yml'
        - '.github/workflows/*'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
      
    paths-ignore:    
        - '*.md'
        - 'docker-compose.yml'
        - '.github/workflows/*'



jobs:


#####################################################################################


  build-test:
    runs-on: ubuntu-latest 
    defaults:
      run:
        shell: bash
    steps:

      - name: checkout
        uses: actions/checkout@v4
    

      - name: Set up Python 3.12
        uses: actions/setup-python@v5 
        with:
          python-version: 3.12 # Modify python version HERE

          
      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      #Task for installing dependencies, multi-line command
      - name: Install dependencies
        run: |
         
          pip install --no-cache-dir --upgrade -r requirements.txt
          

          
      # Task for testing with pytest
      # - name: Test with pytest
      #   run: |
      #     pytest


 
# # #############################################################################
          
#   analyze-codeQL:
#     name: Analyze code
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: ${{ github.workspace }}/app/

#     needs: [build-test]
#     permissions:
#       actions: read
#       contents: read
#       security-events: write
      

#     strategy:
#       fail-fast: false
#       matrix:
#         language: [ 'python' ]
#         # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]

#     steps:
    
#     - name: short-sha
#       uses: benjlevesque/short-sha@v2.2
#       env:
#         SHA: ${{ steps.short-sha.outputs.sha }}
        
  


#     - name: Checkout repository
#       uses: actions/checkout@v4

#     # Initializes the CodeQL tools for scanning.
#     - name: Initialize CodeQL
#       uses: github/codeql-action/init@v2
#       with:
#         languages: ${{ matrix.language }}
#         # If you wish to specify custom queries, you can do so here or in a config file.
#         # By default, queries listed here will override any specified in a config file.
#         # Prefix the list here with "+" to use these queries and those in the config file.
#         # queries: ./path/to/local/query, your-org/your-repo/queries@main

#     # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
#     # If this step fails, then you should remove it and run the build manually (see below)
#     - name: Autobuild
#       uses: github/codeql-action/autobuild@v2


#     # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
#     #    and modify them (or add more) to build your code if your project
#     #    uses a compiled language

#     #- run: |
#     #   make bootstrap
#     #   make release

#     - name: Perform CodeQL Analysis
#       uses: github/codeql-action/analyze@v3

      

#     - name: notify analyze-codeQL Stage Succeeded
#       uses: rjstone/discord-webhook-notify@v1
#       if: success()
#       with:
#           severity: info
#           details: "##  > - **Analyze-codeQL stage Succeeded**"
#           footer: sha ${{ env.SHA }}
#           webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#       env:
#         SHA: ${{ env.SHA }}
#     - name: Test Failure
#       uses: rjstone/discord-webhook-notify@v1
#       if: failure()
#       with:
#           severity: error
#           details: "##  > - **Analyze-codeQL stage Failed**"
#           footer: sha ${{ env.SHA }}
#           webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#       env:
#         SHA: ${{ env.SHA }}
#     - name: Test Cancelled
#       uses: rjstone/discord-webhook-notify@v1
#       if: cancelled()
#       with:
#           severity: warn
#           details: "##  > - **Analyze-codeQL Cancelled!**"
#           footer: sha ${{ env.SHA }}
#           webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#       env:
#           SHA: ${{ env.SHA }}

# ############################################################################

#   analyze-codacy:
#       needs: [build-test]
#       defaults:
#         run:
#           shell: bash 
#           working-directory: ${{ github.workspace }}/app/

#       permissions:
#         contents: read # for actions/checkout to fetch code
#         security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
#         actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
#       name: Codacy Security Scan
#       runs-on: ubuntu-latest
#       steps:

#         - name: short-sha
#           uses: benjlevesque/short-sha@v2.2
#           env:
#             SHA: ${{ steps.short-sha.outputs.sha }}
            
#         # Checkout the repository to the GitHub Actions runner
#         - name: Checkout code
#           uses: actions/checkout@v3
  
#         # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
#         - name: Run Codacy Analysis CLI
#           uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
#           with:
#             # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
#             # You can also omit the token and run the tools that support default configurations
#             project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
#             verbose: true
#             output: results.sarif
#             format: sarif
#             # Adjust severity of non-security issues
#             gh-code-scanning-compat: true
#             # Force 0 exit code to allow SARIF file generation
#             # This will handover control about PR rejection to the GitHub side
#             max-allowed-issues: 2147483647
  
#         # Upload the SARIF file generated in the previous step
#         - name: Upload SARIF results file
#           uses: github/codeql-action/upload-sarif@v2
#           with:
#             sarif_file: results.sarif

#         - name: notify analyze-codacy Stage Succeeded
#           uses: rjstone/discord-webhook-notify@v1
#           if: success()
#           with:
#               severity: info
#               details: "##  > - **Analyze-codacy stage Succeeded**"
#               footer: sha ${{ env.SHA }}
#               webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#           env:
#             SHA: ${{ env.SHA }}
#         - name: Test Failure
#           uses: rjstone/discord-webhook-notify@v1
#           if: failure()
#           with:
#               severity: error
#               details: "##  > - **Analyze-codacy stage Failed**"
#               footer: sha ${{ env.SHA }}
#               webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#           env:
#             SHA: ${{ env.SHA }}
#         - name: Test Cancelled
#           uses: rjstone/discord-webhook-notify@v1
#           if: cancelled()
#           with:
#               severity: warn
#               details: "##  > - **Analyze-codacy Cancelled!**"
#               footer: sha ${{ env.SHA }}
#               webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
#           env:
#               SHA: ${{ env.SHA }}
            
 
# ############################################################################          
                   


#   Trivy-scan:
#     if: github.actor!= 'dependabot[bot]'
#     needs: [build-test]
#     defaults:
#       run:
#         shell: bash 
#         working-directory: ${{ github.workspace }}
#     permissions:
#       contents: read # for actions/checkout to fetch code
#       security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
#       actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
#     name: Trivy analysis
#     runs-on: "ubuntu-22.04"
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Build an image from Dockerfile
#         run: |
#           docker build -t docker.io/mostafaewida/hackmaze_backend:${{ github.sha }} .
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
#         with:
#           image-ref: 'docker.io/mostafaewida/hackmaze_backend:${{ github.sha }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'


# # ########################################################################################################


  push_to_Docker_Hub:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs:  [build-test]
    steps:
      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          
              
      


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERUSERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Checkout repository
        uses: actions/checkout@v4


        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}

          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:${{ env.SHA }}



  
      - name: Clean up Docker Tags
        run: |
          #!/bin/bash
          
          REPO_NAME=${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}  # Replace with your Docker repository name
          USER_NAME=${{ secrets.DOCKERUSERNAME }}
          # Get list of tags for the repository
          TAGS=$(curl -sS "https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/?page_size=10000" | jq -r '.results|.[]|.name')
          
          # Retain the first three tags (most recent)
          KEEP_TAGS=$(echo "$TAGS" | head -n 10)
          
          echo "All Tags: $TAGS"
          echo "Retaining Tags: $KEEP_TAGS"
          
          TOKEN=${{ secrets.DOCKERHUB_TOKEN }} # Replace with your Docker Hub Personal Access Token
          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$USER_NAME\", \"password\": \"$TOKEN\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          
          # Loop through all tags, delete those not in the retained list
          for tag in $TAGS; do
          
              if [[  "$KEEP_TAGS" =~ "$tag" ]]; then
                  echo "keeping $tag"
                  
              else
                  
                  response=$(curl -i -X DELETE   -H "Accept: application/json"   -H "Authorization: JWT $HUB_TOKEN"   https://hub.docker.com/v2/repositories/$REPO_NAME/tags/$tag/)
                  echo "Deleted tag: $tag - Response: $response"
                  
              fi
          done

#############################################################################
